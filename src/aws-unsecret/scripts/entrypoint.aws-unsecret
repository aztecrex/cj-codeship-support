#!/bin/bash

source $CJ_FEATURE_SCRIPT_DIR/codeship-bash/signals.shinc

_aws() {
  entrypoint.aws-base aws "$@"
}

unsecret() {
  mkdir -p $CJ_PLAINTEXT
  local bucket="$1" cipherf plainf
  shift
  while [ "$1" != "" ]; do
    cipherf=$(mktemp)
    plainf=$(mktemp $CJ_PLAINTEXT/plain.XXXXXX)
    _aws s3 cp "s3://$bucket/$1" "$cipherf" > /dev/null
    _aws kms decrypt \
        --ciphertext-blob "fileb://$cipherf" \
        --query Plaintext --output text \
      | base64 -d \
      > "$plainf"
    signal "$1" with "$plainf"
    rm -f cipherf
    shift
  done
}

help() {
  cat << EOH
Decrypt secrets from S3 store.

To decrypt a secret:

$ docker run [<options>] <this-image> <bucket> <object> [<object> ...]

Fetches ciphertext objects, decrypts them, and puts plaintext in the directory
specified by the CJ_PLAINTEXT variable (currently ${CJ_PLAINTEXT}). Each object
is signaled with the CJ signals feature, with a value indicating the path of
the plaintext.  Use the secrets feature of this image to wait for, access,
and manage plaintext.

If a container on this image is used to provide data to other containers,
you must declare the plaintext directory as a volume and mount them on
the consuer container. Additionally, you must share the directory desginated
by the CJ_FEATURE_DATA_DIR environment variable. The defaults for those
directories are subdirectories of '/share'. Finally, the consumer must
obtain the features needed for support. These can be easily imported by
declaring a read-only volume on the container from this image at /features .


To get a shell:

$ docker run -it [<more options>] <this-image> sh


EOH

}

if [ "$1" = "" ]; then
  help >&2
  exit -1
elif [ "$1" = "help" ]; then
  help
elif [ "$1" = "sh" ]; then
  exec bash
else
  unsecret "$@"
fi
