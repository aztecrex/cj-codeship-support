#!/bin/bash

help() {
  cat << EOT
Rolling deploy of ECS service
Usage:
  sh - drop into bash
  <service param name>  <cluster param name> <cloudformation template> [<cloudformation template> ...]

EOT
}

describe-stack() {
   entrypoint.aws-base aws cloudformation describe-stacks \
    --stack-name $1 \
    --output text \
    --query 'Stacks[0].Outputs | join(`"\n"`,[].join(`""`,[OutputKey,`"="`,OutputValue]))'
}

deploy-ecs() {
  service=$1
  cluster=$2
  taskDef=$(entrypoint.aws-base aws ecs describe-services --service $service --cluster $cluster --output text --query 'services[0]|   taskDefinition')
  taskSpec=$(entrypoint.aws-base aws ecs describe-task-definition --task-definition $taskDef --query 'taskDefinition | {containerDefinitions:containerDefinitions,volumes:volumes,family:family}')
  newTaskDef=$(entrypoint.aws-base aws ecs register-task-definition --cli-input-json "$taskSpec" --output text --query 'taskDefinition.taskDefinitionArn')
  entrypoint.aws-base aws ecs update-service --service $service --cluster $cluster --task-definition $newTaskDef
}

go() {
  local serviceParam="$1"
  local clusterParam="$2"
  shift; shift;

  for name in $*; do
    eval $(describe-stack $name | sed 's/^/local /')
  done
  eval service=\$$serviceParam
  eval cluster=\$$clusterParam

  deploy-ecs $service $cluster

}

if [ "$1" = "" ]; then
  help >&2
  exit 1
elif [ "$1" = "help" ]; then
  help
elif [ "$1" = "sh" ]; then
  exec /bin/bash
else
  go "$@"
fi


# allow failure so build is green even if deployment fails
# revisit this cuz it stinks
exit 0
