#!/bin/bash

describe-stack() {
   aws cloudformation describe-stacks \
    --stack-name $1 \
    --output text \
    --query 'Stacks[0].Outputs | join(`"\n"`,[].join(`""`,[OutputKey,`"="`,OutputValue]))'
}

deploy-ecs() {
  service=$1
  cluster=$2
  taskDef=$(aws ecs describe-services --service $service --cluster $cluster --output text --query 'services[0]|   taskDefinition')
  taskSpec=$(aws ecs describe-task-definition --task-definition $taskDef --query 'taskDefinition | {containerDefinitions:containerDefinitions,volumes:volumes,family:family}')
  newTaskDef=$(aws ecs register-task-definition --cli-input-json "$taskSpec" --output text --query 'taskDefinition.taskDefinitionArn')
  aws ecs update-service --service $service --cluster $cluster --task-definition $newTaskDef
}

go() {
  local serviceParam="$1"
  local clusterParam="$2"
  shift; shift;

  for name in $*; do
    eval $(describe-stack $name | sed 's/^/local /')
  done
  eval service=\$$serviceParam
  eval cluster=\$$clusterParam

  deploy-ecs $service $cluster

}

if [ "$1" == "sh" ]; then
  exec /bin/bash
  exit 1
fi

go $*

# allow failure so build is green even if deployment fails
# revisit
exit 0
